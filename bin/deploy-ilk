#!/usr/bin/env bash
set -ex

export ETH_GAS=${ETH_GAS:-"7000000"}
export ETH_FROM=${ETH_FROM:-$(seth rpc eth_coinbase)}
unset SOLC_FLAGS

test -z "$SKIP_BUILD" && dapp build

{ test -z "$1" || test -z "$2" || test -z "$3" || test -z "$4"; } && exit 1

ilk=$1
ilkJoin=$2 # adapter contract name
tok=$3
tokGem=$4 # token contract name

ilkVar=$(echo "$ilk" | tr '-' '_')

# Deploy ETH ilk (adapter, spotter, flip and init variables)
test -z "$MCD_DEPLOY" && exit 1
test -z "$(eval echo "\$${tok}")" && eval export "\${tok}=$(dapp create "$tokGem")"
test -z "$(eval echo "\$PIP_${tok}")" && eval export "\PIP_${tok}=$(dapp create DSValue)"

MCD_VAT=0x$(seth call "$MCD_DEPLOY" "vat()(address)")
eval export "\MCD_JOIN_${ilkVar}=$(dapp create "$ilkJoin" "$MCD_VAT" "$(seth --to-bytes32 "$(seth --from-ascii "$ilk")")" "$(eval echo "\$${tok}")")"
eval export "\MCD_MOVE_${ilkVar}=$(dapp create GemMove "$MCD_VAT" "$(seth --to-bytes32 "$(seth --from-ascii "$ilk")")")"
seth send "$MCD_DEPLOY" "deployCollateral(bytes32,address,address,address)" "$(seth --to-bytes32 "$(seth --from-ascii "$ilk")")" "$(eval echo "\$MCD_JOIN_${ilkVar}")" "$(eval echo "\$MCD_MOVE_${ilkVar}")" "$(eval echo "\$PIP_${tok}")"
while IFS=$'\n' read -r line; do data+=("$line"); done < <(seth call "$MCD_DEPLOY" "ilks(bytes32)(address,address,address)" "$(seth --to-bytes32 "$(seth --from-ascii "$ilk")")")
eval export "\MCD_FLIP_${ilkVar}=0x${data[0]}"

cat > load-ilk-"$(echo "$ilk" | tr '[:upper:]' '[:lower:]')"-"$(seth chain)" << EOF
#!/bin/bash

# ilk deployment on $(seth chain) from $(git rev-parse HEAD)
# $(date)
export PIP_${tok}="$(eval echo "\$PIP_${tok}")"
export ${tok}="$(eval echo "\$${tok}")"
export MCD_JOIN_${ilkVar}="$(eval echo "\$MCD_JOIN_${ilkVar}")"
export MCD_MOVE_${ilkVar}="$(eval echo "\$MCD_MOVE_${ilkVar}")"
export MCD_FLIP_${ilkVar}="$(eval echo "\$MCD_FLIP_${ilkVar}")"
EOF
